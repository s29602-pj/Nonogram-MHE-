


def porownaj_metody(wyniki):
    print("\nðŸ“Š PorÃ³wnanie metod optymalizacji\n")

    naglowek = f"{'Metoda':<30} {'BÅ‚Ä™dy':<10} {'Iteracje':<10} {'Czas [s]':<10}"
    print(naglowek)
    print("-" * len(naglowek))

    for nazwa, blad, iteracje, czas in wyniki:
        print(f"{nazwa:<30} {blad:<10} {iteracje:<10} {czas:.4f}")

    print("\nðŸ“Œ Wnioski:")

    # Filtrowanie metod, ktÃ³re osiÄ…gnÄ™Å‚y najmniejszÄ… liczbÄ™ bÅ‚Ä™dÃ³w
    min_blad = min(wyniki, key=lambda x: x[1])[1]
    najlepsze = [m for m in wyniki if m[1] == min_blad]

    # 1. Najlepszy zestaw parametrÃ³w = najmniej bÅ‚Ä™dÃ³w + najmniej czasu + najmniej iteracji (Å‚Ä…cznie)
    najlepszy_zestaw = min(najlepsze, key=lambda m: m[2] + m[3])  # iteracje + czas
    print(f"â€¢ Najlepszy zestaw parametrÃ³w: {najlepszy_zestaw[0]} (BÅ‚Ä™dy: {najlepszy_zestaw[1]}, "
          f"Iteracje: {najlepszy_zestaw[2]}, Czas: {najlepszy_zestaw[3]:.4f}s)")

    # 2. Najszybsza metoda (wÅ›rÃ³d najlepszych)
    najszybsza = min(najlepsze, key=lambda m: m[3])
    print(f"â€¢ Najszybsza metoda (przy {min_blad} bÅ‚Ä™dach): {najszybsza[0]} ({najszybsza[3]:.4f}s)")

    # 3. Najmniej zasobÃ³w (czas + iteracje)
    najmniej_zasobow = min(najlepsze, key=lambda m: m[2] + m[3])
    print(f"â€¢ Najmniej zasobÃ³w przy {min_blad} bÅ‚Ä™dach: {najmniej_zasobow[0]} (iteracje + czas: "
          f"{najmniej_zasobow[2]} + {najmniej_zasobow[3]:.4f})")

    # 4. Najszybsza zbieÅ¼noÅ›Ä‡ (najmniej iteracji wÅ›rÃ³d najlepszych)
    najszybsza_zbieznosc = min(najlepsze, key=lambda m: m[2])
    print(f"â€¢ Najszybsza zbieÅ¼noÅ›Ä‡: {najszybsza_zbieznosc[0]} ({najszybsza_zbieznosc[2]} iteracji)")